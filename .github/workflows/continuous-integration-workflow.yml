name: route-rating-rest-api continuous integration
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11.0.5' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: ./gradlew build

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11.0.5' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: ./gradlew verifyGoogleJavaFormat

  coverage:
    runs-on: ubuntu-latest
    env:
      PROJECT_KEY: LukeShay_route-rating-rest-api
      SONAR_ORG: luke-shay
      SONAR_HOST: https://sonarcloud.io
      SHA: ${GITHUB_SHA::7}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11.0.5' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: ./gradlew jacocoTestCoverageVerification

  push-image:
    runs-on: ubuntu-latest
    needs: [build, lint, coverage]
    env:
      DOCKER_REPO: lukeshaydocker/route-rating-rest-api
      SHA: ${GITHUB_SHA::7}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11.0.5' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: ./scripts/build.sh
      - run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      - run: docker build -t ${{ env.DOCKER_REPO }}:${{ env.SHA }} -t ${{ env.DOCKER_REPO }}:latest .
      - run: docker push ${{ env.DOCKER_REPO }}:${{ env.SHA }

