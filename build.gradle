import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'jacoco'
    id 'application'
    id 'org.sonarqube' version '2.7'
//    id 'org.jlleitschuh.gradle.ktlint'
}

group = 'com.lukeshay'
version = '0.1.0'
sourceCompatibility = '11'
mainClassName = 'com.lukeshay.restapi.RestApiApplication'

ext {
    springBootVersion = '2.2.2.RELEASE'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring boot dependencies
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: project.springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: project.springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: project.springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: project.springBootVersion

    // Database dependencies
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.2.11'

    // Test dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    // Security dependencies
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: project.springBootVersion
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.10.7'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.10.7'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-orgjson', version: '0.10.7'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'


    // Swagger dependencies
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

    // AWS dependencies
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.752')
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3'

    implementation 'com.google.code.gson:gson'
}

test {
    useJUnitPlatform()
}

task format(type: GoogleJavaFormat) {
    source 'src/main'
    source 'src/test'
    include '**/*.java'
    exclude '**/*Template.java'
}

task verifyFormatting(type: VerifyGoogleJavaFormat) {
    source 'src/main'
    include '**/*.java'
    ignoreFailures true
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                include: [
                    'com/lukeshay/restapi/**',
                ],
                exclude: [
                    '**/*Repository.class',
                    '**/*Body.class',
                    '**/*View.class',
                    '**/*Payload.class',
                    '**/*Filter.class',
                    '**/*Exception.class',
                    '**/*SpringMain.class',
                    '**/*Utils.class',
                    '**/*Auditable.class',
                    '**/*config/*'
                ]
            )
        }))
    }

    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.70
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.45
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

build.dependsOn jacocoTestCoverageVerification