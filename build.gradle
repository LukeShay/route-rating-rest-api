plugins {
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.sonarqube' version '3.1.1'
}

group = 'com.lukeshay'
version = '0.1.0'
sourceCompatibility = '11'
mainClassName = 'com.lukeshay.restapi.RestApiApplication'

ext {
    springBootVersion = '2.2.6.RELEASE'
    jjwtVersion = '0.11.1'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring boot dependencies
    implementation group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-springboot2', version: '1.5.2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: project.springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: project.springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: project.springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: project.springBootVersion

    // Database dependencies
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.19'

    // Test dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    // Security dependencies
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: project.jjwtVersion
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: project.jjwtVersion, {
        exclude group: 'io.jsonwebtoken', module: 'jjwt-api'
    }
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: project.jjwtVersion, {
        exclude group: 'io.jsonwebtoken', module: 'jjwt-api'
    }
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'


    // Swagger dependencies
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

    // AWS dependencies
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1017')
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3'
    implementation group: 'com.amazonaws', name: 'aws-xray-recorder-sdk-spring', version: '2.8.0'

    implementation group: 'com.google.code.gson', name: 'gson'
}

test {
    useJUnitPlatform()
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    include: [
                            'com/lukeshay/restapi/**',
                    ],
                    exclude: [
                            '**/*Repository.class',
                            '**/*Body.class',
                            '**/*View.class',
                            '**/*Payload.class',
                            '**/*Filter.class',
                            '**/*Exception.class',
                            '**/*SpringMain.class',
                            '**/*Utils.class',
                            '**/*Auditable.class',
                            '**/StreamLambdaHandler.class',
                            '**/*config/*'
                    ]
            )
        }))
    }

    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.70
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.45
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    archiveFileName = 'rest-api-lambda.zip'
    into('lib') {
        from(configurations.compileClasspath) {
            exclude 'tomcat-embed-*'
        }
    }
}

build.finalizedBy(buildZip)
